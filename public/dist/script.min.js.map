{"version":3,"sources":["script.js"],"names":["tasksDOM","document","querySelector","formDOM","formAlertDOM","_ref","tasks","allTasks","regeneratorRuntime","async","_context","prev","next","awrap","axios","get","sent","data","console","log","length","innerHTML","abrupt","map","task","completed","_id","name","concat","join","t0","stop","showTasks","addEventListener","event","_context2","preventDefault","taskInputDOM","value","post","style","display","textContent","classList","add","remove","element","id","_context3","parentElement","contains","dataset"],"mappings":"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","file":"script.min.js","sourcesContent":["const tasksDOM = document.querySelector('.tasks');\nconst formDOM = document.querySelector('.task-form');\nconst taskInputDOM = document.querySelector('.task-input')\nconst formAlertDOM = document.querySelector('.form-alert');\n// /api/v1/tasksからタスクを読み込む\nconst showTasks = async () =>{\n    try {\n        //実作apiにアクセス\n        const {data: tasks} = await axios.get(\"/api/v1/tasks\");\n        //タスクがない時の表示\n        console.log(tasks.length);\n        if(tasks.length < 1){\n            tasksDOM.innerHTML = `<h5 class=\"empty-list\">タスクがありません。</h5>`;\n            return\n        }\n        //タスクを出力\n        const allTasks = tasks.map((task) => {\n            const {completed, _id, name} = task;\n            return             `<div class=\"single-task ${completed && \"task-completed\"}\">\n            <h5>\n                <span><i class=\"far fa-check-circle\"></i></span>${name}\n            </h5>\n            <div class=\"task-links\">\n                <!-- 編集リンク -->\n                <a href=\"edit.html?id=${_id}\" class=\"edit-link\">\n                    <i class=\"fas fa-edit\"></i>\n                </a>\n                <button type=\"button\" class=\"delete-btn\" data-id=\"${_id}\">\n                    <i class=\"fas fa-trash\"></i>\n                </button>\n            </div>\n        </div>`;\n        }).join(\"\");\n        // console.log(allTasks)\n        tasksDOM.innerHTML = allTasks;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nshowTasks();\n\n//タスクの新規作成\nformDOM.addEventListener('submit',async (event)=>{\n    event.preventDefault();\n    const name = taskInputDOM.value;\n    try {\n        await axios.post(\"/api/v1/tasks\",{name : name})\n        showTasks();\n        taskInputDOM.value = \"\";\n        formAlertDOM.style.display = \"block\";\n        formAlertDOM.textContent = \"タスクを追加しました。\";\n        formAlertDOM.classList.add(\"text-success\");\n    } catch (error) {\n        console.log(error)\n        formAlertDOM.style.display = \"block\";\n        formAlertDOM.innerHTML = '無効です。もう一度やり直して下さい。'\n    }\n    setTimeout(()=>{\n        formAlertDOM.style.display = \"none\"\n        formAlertDOM.classList.remove(\"text-success\");\n    },3000);\n});\n\n//タスクの削除\ntasksDOM.addEventListener('click',async(event) => {\n    const element = event.target;\n    console.log(element.parentElement);\n    if(element.parentElement.classList.contains(\"delete-btn\")){\n        const id = element.parentElement.dataset.id;\n        // console.log(id)\n        try {\n            await axios.delete(`/api/v1/tasks/${id}`);\n            showTasks();\n        } catch (error) {\n            console.log(error)\n        }\n    }\n})"]}