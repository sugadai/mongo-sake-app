{"version":3,"sources":["tasks.js"],"names":["sake","require","req","res","allsakes","regeneratorRuntime","async","_context","prev","next","getAllTask","log","awrap","find","sent","status","json","t0","stop","createTask","createsake","_context2","console","create","body","getSingleTask","getsingletask","_context3","findOne","_id","params","id","abrupt","concat","updateTask","updatetask","_context4","findOneAndUpdate","new","deleteATask","deletesake","_context5","findOneAndDelete","module","exports"],"mappings":"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","file":"tasks.min.js","sourcesContent":["const sake = require('../models/Task');\n\nconst getAllTask = async (req,res) =>{\n    try {\n        console.log('全てのデータを取得しました。')\n        const allsakes = await sake.find({});\n        res.status(200).json(allsakes);\n    } catch (error) {\n        res.status(500).json(error)\n    }\n}\n\nconst createTask = async (req,res) =>{\n    try {\n        console.log('酒を一つ登録しました。')\n        const createsake = await sake.create(req.body);\n        res.status(200).json(createsake);\n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst getSingleTask = async (req,res) =>{\n    try {\n        // console.log('特定の酒を取得しました。'+ req.params.id)\n        const getsingletask = await sake.findOne({\n            _id : req.params.id\n        });\n        if(!getsingletask){\n            return res.status(404).json(`_id${req.params.id}は存在しません。`)\n        }\n        res.status(200).json(getsingletask);\n    } catch (error) {\n        res.status(500).json(error)\n    }\n}\n\nconst updateTask = async (req,res) =>{\n    try {\n        console.log('タスク情報を更新しました。')\n        const updatetask = await sake.findOneAndUpdate(\n            {_id : req.params.id},\n            req.body,\n            {new : true});\n        res.status(200).json(updatetask);\n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst deleteATask = async (req,res) =>{\n    try {\n        console.log(`${req.params.id}をデータを削除しました。`)\n        const deletesake = await sake.findOneAndDelete({_id : req.params.id});\n        res.status(200).json(deletesake);\n    } catch (error) {\n        console.log(error)\n    }    \n}\n\nmodule.exports = {\n    getAllTask,\n    createTask,\n    getSingleTask,\n    updateTask,\n    deleteATask,\n}"]}