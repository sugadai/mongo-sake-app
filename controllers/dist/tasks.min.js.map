{"version":3,"sources":["tasks.js"],"names":["require","resetWatchers","Task","getAllTask","req","res","allTask","regeneratorRuntime","async","_context","prev","next","awrap","find","body","sent","json","t0","status","stop","createTask","_createTask","_context2","console","log","create","getSingleTask","_getSingleTask","_context3","params","id","findOne","_id","abrupt","concat","param","_updateTask","_context4","findOneAndUpdate","new","updateTask","deleteATask","_deleteATask","_context5","findOneAndDelete","module","exports"],"mappings":"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","file":"tasks.min.js","sourcesContent":["const { resetWatchers } = require('nodemon/lib/monitor/watch');\nconst Task = require('../models/Task');\n\n\nconst getAllTask = async (req,res) => {\n    try {\n        const allTask = await Task.find(req.body)\n        res.status(200).json(allTask);       \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst createTask = async (req,res) => {\n    try {\n        console.log(req.body)\n        const createTask = await Task.create(req.body)\n        res.status(200).json(createTask);       \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst getSingleTask = async (req,res) => {\n    try {\n        console.log(req.params.id)\n        const getSingleTask = await Task.findOne({ _id: req.params.id})\n        if(!getSingleTask){\n            return res.status(404).json(`_id:${req.param.id}は存在しません。`)\n        }  \n        res.status(200).json(getSingleTask);     \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst  updateTask = async (req,res) => {\n    try {\n        console.log(req.body)\n        const updateTask = await Task.findOneAndUpdate(\n            { _id: req.params.id},\n            req.body,\n            {new: true})\n        if(!updateTask){\n            return res.status(404).json(`_id:${req.param.id}は存在しません。`)\n        }  \n        res.status(200).json(updateTask);     \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst deleteATask = async (req,res) => {\n    try {\n        console.log(req.params.id)\n        const deleteATask = await Task.findOneAndDelete(\n            { _id: req.params.id})\n        if(!deleteATask){\n            return res.status(404).json(`_id:${req.param.id}は存在しません。`)\n        }  \n        res.status(200).json(deleteATask);     \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nmodule.exports = {\n    getAllTask,\n    createTask,\n    getSingleTask,\n    updateTask,\n    deleteATask,\n};"]}