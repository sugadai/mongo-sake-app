{"version":3,"sources":["tasks.js"],"names":["require","resetWatchers","Task","getAllTask","req","res","find","body","allTask","status","json","createTask","console","log","create","getSingleTask","params","id","findOne","_id","param","updateTask","findOneAndUpdate","deleteATask","findOneAndDelete","module","exports"],"mappings":"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","sourcesContent":["const { resetWatchers } = require('nodemon/lib/monitor/watch');\nconst Task = require('../models/Task');\n\n\nconst getAllTask = async (req,res) => {\n    try {\n        const allTask = await Task.find(req.body)\n        res.status(200).json(allTask);       \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst createTask = async (req,res) => {\n    try {\n        console.log(req.body)\n        const createTask = await Task.create(req.body)\n        res.status(200).json(createTask);       \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst getSingleTask = async (req,res) => {\n    try {\n        console.log(req.params.id)\n        const getSingleTask = await Task.findOne({ _id: req.params.id})\n        if(!getSingleTask){\n            return res.status(404).json(`_id:${req.param.id}は存在しません。`)\n        }  \n        res.status(200).json(getSingleTask);     \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst  updateTask = async (req,res) => {\n    try {\n        console.log(req.body)\n        const updateTask = await Task.findOneAndUpdate(\n            { _id: req.params.id},\n            req.body,\n            {new: true})\n        if(!updateTask){\n            return res.status(404).json(`_id:${req.param.id}は存在しません。`)\n        }  \n        res.status(200).json(updateTask);     \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst deleteATask = async (req,res) => {\n    try {\n        console.log(req.params.id)\n        const deleteATask = await Task.findOneAndDelete(\n            { _id: req.params.id})\n        if(!deleteATask){\n            return res.status(404).json(`_id:${req.param.id}は存在しません。`)\n        }  \n        res.status(200).json(deleteATask);     \n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nmodule.exports = {\n    getAllTask,\n    createTask,\n    getSingleTask,\n    updateTask,\n    deleteATask,\n};"],"file":"tasks.dev.js"}