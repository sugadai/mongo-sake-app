{"version":3,"sources":["tasks.js"],"names":["sake","require","getAllTask","req","res","console","log","find","allsakes","status","json","createTask","create","body","createsake","getSingleTask","findOne","_id","params","id","getsingletask","updateTask","findOneAndUpdate","updatetask","deleteATask","findOneAndDelete","deletesake","module","exports"],"mappings":"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","sourcesContent":["const sake = require('../models/Task');\n\nconst getAllTask = async (req,res) =>{\n    try {\n        console.log('全てのデータを取得しました。')\n        const allsakes = await sake.find({});\n        res.status(200).json(allsakes);\n    } catch (error) {\n        res.status(500).json(error)\n    }\n}\n\nconst createTask = async (req,res) =>{\n    try {\n        console.log('酒を一つ登録しました。')\n        const createsake = await sake.create(req.body);\n        res.status(200).json(createsake);\n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst getSingleTask = async (req,res) =>{\n    try {\n        // console.log('特定の酒を取得しました。'+ req.params.id)\n        const getsingletask = await sake.findOne({\n            _id : req.params.id\n        });\n        if(!getsingletask){\n            return res.status(404).json(`_id${req.params.id}は存在しません。`)\n        }\n        res.status(200).json(getsingletask);\n    } catch (error) {\n        res.status(500).json(error)\n    }\n}\n\nconst updateTask = async (req,res) =>{\n    try {\n        console.log('タスク情報を更新しました。')\n        const updatetask = await sake.findOneAndUpdate(\n            {_id : req.params.id},\n            req.body,\n            {new : true});\n        res.status(200).json(updatetask);\n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n\nconst deleteATask = async (req,res) =>{\n    try {\n        console.log(`${req.params.id}をデータを削除しました。`)\n        const deletesake = await sake.findOneAndDelete({_id : req.params.id});\n        res.status(200).json(deletesake);\n    } catch (error) {\n        console.log(error)\n    }    \n}\n\nmodule.exports = {\n    getAllTask,\n    createTask,\n    getSingleTask,\n    updateTask,\n    deleteATask,\n}"],"file":"tasks.dev.js"}