"use strict";var _require=require("nodemon/lib/monitor/watch"),resetWatchers=_require.resetWatchers,Task=require("../models/Task"),getAllTask=function(t,r){var a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Task.find(t.body));case 3:a=e.sent,r.status(200).json(a),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),r.status(500).json(e.t0);case 10:case"end":return e.stop()}},null,null,[[0,7]])},createTask=function(t,r){var a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,console.log(t.body),e.next=4,regeneratorRuntime.awrap(Task.create(t.body));case 4:a=e.sent,r.status(200).json(a),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),r.status(500).json(e.t0);case 11:case"end":return e.stop()}},null,null,[[0,8]])},getSingleTask=function(t,r){var a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,console.log(t.params.id),e.next=4,regeneratorRuntime.awrap(Task.findOne({_id:t.params.id}));case 4:if(a=e.sent){e.next=7;break}return e.abrupt("return",r.status(404).json("_id:".concat(t.param.id,"は存在しません。")));case 7:r.status(200).json(a),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),r.status(500).json(e.t0);case 13:case"end":return e.stop()}},null,null,[[0,10]])},updateTask=function(t,r){var a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,console.log(t.body),e.next=4,regeneratorRuntime.awrap(Task.findOneAndUpdate({_id:t.params.id},t.body,{new:!0}));case 4:if(a=e.sent){e.next=7;break}return e.abrupt("return",r.status(404).json("_id:".concat(t.param.id,"は存在しません。")));case 7:r.status(200).json(a),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),r.status(500).json(e.t0);case 13:case"end":return e.stop()}},null,null,[[0,10]])},deleteATask=function(t,r){var a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,console.log(t.params.id),e.next=4,regeneratorRuntime.awrap(Task.findOneAndDelete({_id:t.params.id}));case 4:if(a=e.sent){e.next=7;break}return e.abrupt("return",r.status(404).json("_id:".concat(t.param.id,"は存在しません。")));case 7:r.status(200).json(a),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),r.status(500).json(e.t0);case 13:case"end":return e.stop()}},null,null,[[0,10]])};module.exports={getAllTask:getAllTask,createTask:createTask,getSingleTask:getSingleTask,updateTask:updateTask,deleteATask:deleteATask};
//# sourceMappingURL=tasks.min.js.map
